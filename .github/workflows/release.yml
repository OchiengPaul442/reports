name: Release
on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create a valid tag
        run: |
          git tag v1.0.${GITHUB_RUN_NUMBER}
          git push --tags

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v1.0.${{ github.run_number }}
          release_name: Release v1.0.${{ github.run_number }}
          draft: false
          prerelease: false

      - name: Generate release notes
        id: release_notes
        uses: actions/github-script@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: pulls } = await github.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed',
              base: context.ref
            });

            const categorizedNotes = {
              bug: [],
              documentation: [],
              maintenance: [],
              feature: [],
              others: []
            };

            pulls.forEach(pull => {
              const labels = pull.labels.map(label => label.name.toLowerCase());
              const note = `- ${pull.title} (#${pull.number})`;

              if (labels.includes('bug')) {
                categorizedNotes.bug.push(note);
              } else if (labels.includes('documentation')) {
                categorizedNotes.documentation.push(note);
              } else if (labels.includes('maintenance')) {
                categorizedNotes.maintenance.push(note);
              } else if (labels.includes('feature')) {
                categorizedNotes.feature.push(note);
              } else {
                categorizedNotes.others.push(note);
              }
            });

            const releaseNotes = `
              **Bugs:**
              ${categorizedNotes.bug.join('\n') || 'No bug fixes in this release.'}

              **Documentation:**
              ${categorizedNotes.documentation.join('\n') || 'No documentation updates in this release.'}

              **Maintenance:**
              ${categorizedNotes.maintenance.join('\n') || 'No maintenance tasks in this release.'}

              **Features:**
              ${categorizedNotes.feature.join('\n') || 'No new features in this release.'}

              **Others:**
              ${categorizedNotes.others.join('\n') || 'No other pull requests in this release.'}
            `;

            // Update the release with the generated release notes
            await github.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: context.release.id,
              body: releaseNotes
            });
